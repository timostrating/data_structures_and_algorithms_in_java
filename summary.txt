data_structures_and_algorithms_in_java




1: OVERVIEW

Data structures organize / optimize data in memory or on disk
Algorithms:  insert / search / delete	
Constructor: special methode that is called automaticly
Inherintance: 
	Base class		extended / derived class
	employee.java		secretary.java
Polymorphism: 
	display(); in baseclass derived class can deside what to do

int intVar;          // an int variable called intVar       creates space for a int
BankAccount bc1;     // reference to a BankAccount object   creates space for a address

bc2 = bc1            // this will copie 1 into 2    SETS ADDRESS 2 = ADDRESS 1
                     // 2 adresses that point to the same object in memory 
bc1 == bc2           // ADDRESS 1 == ADDRESS 2
bc1.equals(bc2)      // object 1 == object 2

+, *, =              // There are no Overloaded Operators in java
.                    // dot is a operator

NAME      suffix   BITS   VALUES
boolean            1      true  OR false
byte               8      –128 / +127
char      ('')     16     ‘\u0000’ / ‘\uFFFF’
short              16     –32,768  / +32,767
int                32     –2,147,483,648 / +2,147,483,647
long       L       64     –9,223,372,036,854,775,808 / +9,223,372,036,854,775,807
float      F       32     Approximately 10 –38 to 10 +38 ; 7 significant digits
double             64     Approximately 10 –308 to 10 +308 ; 15 significant digits

All other types are classes, like string

String s = "hallo";
s.charAt(0);                           // 'h' String is een class dus gebruiken we een functie
Integer.parseInt(s)                    // De Integer CLASS helps to get a int TYPE
Double aDub = Double.valueOf(s);	 
aDub.doubleValue();                    // DE Double CLASS helps to build a double TYPE



1: Questions

	1: insert, delete, search
	2: sorting
	3: C - part of a record
	4: search key
	5: A - is a class                                          B ???
	6: A - is a blueprint for many objects
	7: B - requieres the keyword new                           D  --> Class specification 
	8: ----                                                    Method
	9: ----                                                    DOT
	10: Data Types





2: ARRAYS

null is a object

int[] intArray;              // defines a reference to an array OBJECT
intArray = new int[100];     // creates the array, and sets intArray to refer to it

container class, is a class that is wraped around data.

class methodes = class interface

abstraction is splitting classes in HOW and WHAT

Binary Search, for a orderd list
0                    1–100
1    50   Too high   1–49
2    25   Too low    26–49
3    37   Too high   26–36
4    31   Too low    32–36
5    34   Too high   32–33
6    32   Too low    33–33
7    33   Correct

Big O notation,  the algorith's speed related to the number of items

N items
T time
K constant

_FORMULA
 insert array[lasindex]:    T = K
 linear search:             T = K * N / 2       T = k * N
 Binary search:             T = K * log2( N )   T = K * log( N )

_Big O		o = "order of"
 insert array[lasindex]:    O( 1 )
 linear search:             O( N )
 Binary search:             O( log( N ) )




2: Questions

	1: D 
	2: True
	3: B
	4: False
	5: new
	6: D
	7: interface
	8: D
	9: to the power
	10: 3
	11: B
	12: 6
	13: False
	14: A
	15: -----                       constant
	16: objects








3: SIMPLE SORTING

BUBBLE SORT   O( N^2 )

move left to right  compare 2  swap the larger one to the right 
 1. Compare two items
 2. If the one on the left is bigger swap them.
 3. Move one position right.

2 4 1 3
^ ^    |

2 4 1 3   -->   2 1 4 3
^ ^  |

2 1 4 3   -->   2 1 3 4
    ^ ^|             |

2 1 3 4   -->   1 2 3 4
^ ^  |               |

1 2 3 4   -->   1 2 3 4
  ^ ^|             |
 
1 2 3 4   -->   done 
^ ^|

for(out = nElems-1; out > 1; out--)      // outer loop (backward)
   for(in = 0; in < out; in++)           // inner loop (forward)
      if( a[in] > a[in+1] )              // out of order?
         swap(in, in+1);                 // swap them



SELECTION SORT   O( N^2 )

get current smallest swap it with the last item
 1: Write down the first
 2: Go to the next
 3: If current is smaller scratch away what is written down and write down the current item
 4: At the end write down the current shortest

int out, in, min;
for(out = 0; out < nElems-1; out++) {    // outer loop
   min = out;                            // minimum
   for(in= out+1; in < nElems; in++) { 	 // inner loop
      if( a[in] < a[min] )               // if min greater,
         min = in;                       // we have a new min
      swap(out, min);                    // swap them
   }
}



INSERTION SORT   O( N^2 )

1 2 4 5 6 3 7 8
         |^

1 2 4 5 6   7 8     3
         |

1 2 4 5 6   7 8     3
    ^ ^ ^|

1 2   4 5 6 7 8     3
           |

1 2 3 4 5 6 7 8     3
           |

int in, out;
for(out=1; out < nElems; out++) {        // out is dividing line
   long temp = a[out];                   // remove marked item
   in = out;                             // start shifts at out
   while(in > 0 && a[in-1] >= temp) {    // until one is smaller,
      a[in] = a[in-1];                   // shift item to right
      --in;                              // go left one position
   }
   a[in] = temp;                         // insert marked item
}


Stability   A sort is stable if the order of elements with the same key is retained.
if we have multipe items with the same data/name  
An algerithme is called stable if the not sorted item  input order = output order



3: Questions

    1: d 
    2: comparing, shifting, marking         comparing, swapping (or copying)
    3: FALSE
    4: a
    5: FALSE
    6: d
    7: FALSE
    8: 2                    3 times the steps
    9: Same as bubble sort only we write down the shortest and shift on the end.
    10: c
    11: d
    12: shiting             copies
    13: b
    14: You can always substract a part of the final sorted list from the current list that is in progress
    15: b
